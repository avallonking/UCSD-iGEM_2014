data = sqldf("select * from data where Checklist = 'X'")
data
View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf(select P_ID, P_Name, Title, Authors, Journal, Year, from data where O_ID = ''")
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year, from data where O_ID = ''")
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
operon = sqldf("select O_ID, Structure from operons where O_ID != ''")
operon = sqldf("select O_ID, Structure from operons where O_ID != ''")
View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
View(input)
View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select P_ID, O_ID, R_L from data")
View(opr)
structure = sqldf("select structure from data where O_ID != ''")
View(structure)
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
View(optr)
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
View(optr)
int_d = sql("select Domain from data where O_ID != ''")
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
interactors = rbind(int_d, int_r)
int_r
names(int_r)
names(int_r)[1] = "Domain"
int_r
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
View(interactors)
names(interactors)[1] = "interactors"
View(interactors)
operon = sqldf("select O_ID, Structure, Math from operons where O_ID != ''")
View(operon)
happy <- function(x,y){
print(x)
}
happy <- function(x,y){
print(x)
print(y)
}
happy_list = c(1,2,3,4)
lapply(happy_list, happy)
lapply(happy_list, happy, 3)
lapply(happy_list, happy, c(5,6,7,8)
)
info_data = c(plasmid, operon, input, output, opr, structure, optr, interactors)
info_names = c("plasmid.csv", "operon.csv", "input.csv", "output.csv", "opr.csv", "structure.csv", "optr.csv", "interactors.csv")
#writing out all datasets
lapply(info_data, write.csv(), info_names)
write_to_csv <- function(data, file_name){
write.csv(data, file_name)
}
mapply(write_to_csv, data, file_name)
mapply(write_to_csv, info_data, info_names)
write_to_csv <- function(data, file_name){
write.csv(data, file_name)
}
mapply(write_to_csv, info_data, info_names)
mapply("write_to_csv", info_data, info_names)
mapply(write_to_csv, info_data, info_names)
length(info_data)
length(info_names)
info_data = c(plasmid, operon, input, output, opr, structure, optr, interactors)
length(info_data)
info_data = c(plasmid, operon, input, output, opr, structure, optr)
length(info_data)
info_data = c(plasmid)
length(info_data)
info_data
info_data = c(plasmid, operon, input, output, opr, structure, optr, interactors)
info_data
get(plasmid)
?get
get("plasmid")
info_data = c(get("plasmid"), operon, input, output, opr, structure, optr, interactors)
length(info_data)
info_names = c("plasmid", "operon", "input", "output", "opr", "structure", "optr", "interactors")
write_to_csv <- function(data){
write.csv(get(data), paste(data,".csv"))
}
length(info_names)
mapply(write_to_csv, info_names)
info_names = c("plasmid", "operon", "input", "output", "opr", "structure", "optr", "interactors")
write_to_csv <- function(data){
write.csv(get(data), paste(data,".csv"))
}
length(info_names)
lapply(write_to_csv, info_names)
lapply(info_names, write_to_csv)
getwd()
lapply(info_names, write_to_csv)
View(structure)
?read.csv
write_to_csv <- function(data){
write.csv(get(data), paste(data,".txt"), sep = "\t")
}
length(info_names)
lapply(info_names, write_to_csv)
write_to_csv <- function(data){
write.csv(get(data), paste(data,".txt"), sep = "\\t")
}
length(info_names)
lapply(info_names, write_to_csv)
write_to_tab <- function(data){
write.delim(get(data), paste(data,".txt"))
}
length(info_names)
lapply(info_names, write_to_csv)
lapply(info_names, write_to_tab)
?write.csv
write_to_tab <- function(data){
write.table(get(data), paste(data,".txt"), sep= "\t")
}
length(info_names)
lapply(info_names, write_to_tab)
lapply(info_names, write_to_tab)
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt", ), sep= "\t")
}
length(info_names)
lapply(info_names, write_to_tab)
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t")
}
length(info_names)
lapply(info_names, write_to_tab)
lapply(info_names, write_to_tab)
as.table(plasmid)
as.table.default(plasmid)
?as.table
?write
?write.delim
??write.delim
?write.table
write_to_tab <- function(data){
write.csv(get(data), paste0(data,".txt"), sep= "\t")
}
length(info_names)
lapply(info_names, write_to_tab)
?tabs
??tabs
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
length(info_names)
lapply(info_names, write_to_tab)
source('~/Programming/iGEM_ME/UCSD_IGEM/CircuitNetwork/src/sql/test_plasmid_database/database_linh_formmate.R')
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name){
file.remove(full_name)
}
}
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name){
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)
file.remove(full_name)
?file
?file.remove
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name){file.remove(full_name)}
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name) {file.remove(full_name)}
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)) {file.remove(full_name)}
}
lapply(into_names)
lapply(into_names, delete_file)
lapply(info_names, delete_file)
#reading in the unformmated version of linh's database
data = read.csv("database_linh_new.csv")
data = sqldf("select * from data where Checklist = 'X'")
View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
View(plasmid)
#extracting all operon table relevant columsn
operon = sqldf("select O_ID, Structure, Math from operons where O_ID != ''")
View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select P_ID, O_ID, R_L from data")
View(opr)
structure = sqldf("select structure from data where O_ID != ''")
View(structure)
#extracting the operon_ID and structure. Need to take structure and need
#parse to get the part_ID. The parts need an id so it would be better to
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
View(optr)
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
names(int_r)
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "interactors"
names(int_r)[1] = "Domain"
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "Interactors"
#View(interactors)
#writing all datasets
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
lapply(info_names, write_to_tab)
#gathering all datasets
info_names = c("plasmid", "operon", "input", "output", "opr", "structure", "optr", "interactors")
#deleting all old txt files to make room for new ones
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)) {file.remove(full_name)}
}
lapply(info_names, delete_file)
#reading in the unformmated version of linh's database
data = read.csv("database_linh_new.csv")
data = sqldf("select * from data where Checklist = 'X'")
#View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
#View(plasmid)
#extracting all operon table relevant columsn
operon = sqldf("select O_ID, Structure, Math from operons where O_ID != ''")
#View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
#View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select P_ID, O_ID, R_L from data")
#View(opr)
structure = sqldf("select structure from data where O_ID != ''")
#View(structure)
#extracting the operon_ID and structure. Need to take structure and need
#parse to get the part_ID. The parts need an id so it would be better to
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
#View(optr)
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
names(int_r)[1] = "Domain"
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "Interactors"
#View(interactors)
#writing all datasets
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
lapply(info_names, write_to_tab)
#gathering all datasets
info_names = c("plasmid", "operon", "input", "output", "opr", "structure", "optr", "interactors")
#deleting all old txt files to make room for new ones
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)) {file.remove(full_name)}
}
lapply(info_names, delete_file)
#reading in the unformmated version of linh's database
data = read.csv("database_linh_new.csv")
data = sqldf("select * from data where Checklist = 'X'")
#View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
#View(plasmid)
#extracting all operon table relevant columsn
operon = sqldf("select O_ID, Structure, Math from operons where O_ID != ''")
#View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
#View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
#View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select P_ID, O_ID, R_L from data")
#View(opr)
structure = sqldf("select structure from data where O_ID != ''")
#View(structure)
#extracting the operon_ID and structure. Need to take structure and need
#parse to get the part_ID. The parts need an id so it would be better to
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
#View(optr)
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
names(int_r)[1] = "Domain"
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "Interactors"
#View(interactors)
#writing all datasets
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
lapply(info_names, write_to_tab)
View(operon)
#gathering all datasets
info_names = c("plasmid", "operon", "input", "output", "opr", "structure", "optr", "interactors")
#deleting all old txt files to make room for new ones
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)) {file.remove(full_name)}
}
lapply(info_names, delete_file)
#reading in the unformmated version of linh's database
data = read.csv("database_linh_new.csv")
data = sqldf("select * from data where Checklist = 'X'")
#View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
#View(plasmid)
#extracting all operon table relevant columsn
operon = sqldf("select O_ID, Structure, Math from data where O_ID != ''")
View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
#View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
#View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select P_ID, O_ID, R_L from data")
#View(opr)
structure = sqldf("select structure from data where O_ID != ''")
#View(structure)
#extracting the operon_ID and structure. Need to take structure and need
#parse to get the part_ID. The parts need an id so it would be better to
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
#View(optr)
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
names(int_r)[1] = "Domain"
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "Interactors"
#View(interactors)
#writing all datasets
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
lapply(info_names, write_to_tab)
View(structure)
structure
as.vector(structure)
v = as.vector(structure)
v
sapply(v, strsplit)
sapply(v, function(X) strsplit(x, split = "--->"))
sapply(v, function(x) strsplit(x, split = "--->"))
sapply(v, function(x) strsplit(x, split = ">"))
sapply(v, function(x) strsplit(x, split = "-"))
sapply(v, function(x) strsplit(x, split = "\\-"))
sapply(v, function(x) strsplit(x, split = "\\>"))
sapply(v, function(x) strsplit(x, split = "\>"))
sapply(v, function(x) strsplit(x, split = "\\>"))
sapply(v, function(x) strsplit(x, split = "\\\>"))
sapply(v, function(x) strsplit(x, split = "\\\\>"))
sapply(v, function(x) strsplit(x, split = ">"))
string = "string"
string = "str--->ing"
strsplit(string, split = "\\>")
strsplit(string, split = "\>")
strsplit(string, split = ">")
strsplit(string, split = "--->")
v
typeof(str)
typeof(v)
v[[1]]
v[[1]][1]
typeof(v[[1]][1])
typeof(toString(v[[1]][1]))
toString(v[[1]][1])
sapply(v[[]], function(x) strsplit(toString(x), split = ">"))
sapply(v[[]], function(x) strsplit(toString(x), split = ">")))
sapply(v[[]], function(x) strsplit(toString(x), split = ">"))
sapply(v[[]][], function(x) strsplit(toString(x), split = ">"))
sapply(v[[1]], function(x) strsplit(toString(x), split = ">"))
sapply(v[[1]], function(x) strsplit(toString(x), split = "--->"))
parts sapply(v[[1]], function(x) strsplit(toString(x), split = "--->"))
parts = sapply(v[[1]], function(x) strsplit(toString(x), split = "--->"))
parts
parts[[38]]
parts[[38]][1]
parts[[38]][2]
parts = as.vector(structure)
parts = sapply(v[[1]], function(x) strsplit(toString(x), split = "--->"))
View(parts)
as.data.frame(parts)
typeof(parts)
parts
write.csv(parts)
write.csv(parts, "parts.txt")
opr = sqldf("select P_ID, O_ID, R_L from data where O_ID != "")
#View(opr)
parts = sqldf("select structure from data where O_ID != ''")
opr = sqldf("select P_ID, O_ID, R_L from data where O_ID != ''")
#gathering all datasets
info_names = c("plasmid", "operon", "input", "output", "opr", "optr", "part", "optr", "interactor")
#deleting all old txt files to make room for new ones
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)) {file.remove(full_name)}
}
lapply(info_names, delete_file)
#reading in the unformmated version of linh's database
data = read.csv("database_linh_new.csv")
data = sqldf("select * from data where Checklist = 'X'")
#View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
#View(plasmid)
#extracting all operon table relevant columsn
operon = sqldf("select O_ID, Structure, Math from data where O_ID != ''")
View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
#View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
#View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select P_ID, O_ID, R_L from data where O_ID != ''")
#View(opr)
parts = sqldf("select structure from data where O_ID != ''")
#View(structure)
#extracting the operon_ID and structure. Need to take structure and need
#parse to get the part_ID. The parts need an id so it would be better to
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
#View(optr)
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
names(int_r)[1] = "Domain"
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "Interactors"
#View(interactors)
#writing all datasets
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
lapply(info_names, write_to_tab)
#gathering all datasets
info_names = c("plasmid", "operon", "input", "output", "opr", "optr", "part", "optr", "interactor")
#deleting all old txt files to make room for new ones
delete_file <- function(file_name){
full_name = paste0(file_name, ".txt")
if(file.exists(full_name)) {file.remove(full_name)}
}
lapply(info_names, delete_file)
#reading in the unformmated version of linh's database
data = read.csv("database_linh_new.csv")
data = sqldf("select * from data where Checklist = 'X'")
#View(data)
#extracting all plasmid table relevant columns
plasmid = sqldf("select P_ID, P_Name, Title, Authors, Journal, Year from data where O_ID = ''")
#View(plasmid)
#extracting all operon table relevant columsn
operon = sqldf("select O_ID, Structure, Math from data where O_ID != ''")
View(operon)
#extracting input/output table relevant information
input = sqldf("select O_ID, Domain from data where O_ID != ''")
#View(input)
output = sqldf("select O_ID, Range from data where O_ID != ''")
#View(output)
#extracting the operon name and plasmid names. Need to map back to
#operon_id and plasmid_id in python.
opr = sqldf("select O_ID, R_L from data where O_ID != ''")
#View(opr)
parts = sqldf("select structure from data where O_ID != ''")
#View(structure)
#extracting the operon_ID and structure. Need to take structure and need
#parse to get the part_ID. The parts need an id so it would be better to
#first work on the parts before you get there.
optr = sqldf("select O_ID, Structure from data where O_ID != ''")
#View(optr)
int_d = sqldf("select Domain from data where O_ID != ''")
int_r = sqldf("select Range from data where O_ID != ''")
names(int_r)[1] = "Domain"
interactors = rbind(int_d, int_r)
interactors = unique(interactors)
names(interactors)[1] = "Interactors"
#View(interactors)
#writing all datasets
write_to_tab <- function(data){
write.table(get(data), paste0(data,".txt"), sep= "\t", row.names = FALSE)
}
lapply(info_names, write_to_tab)
